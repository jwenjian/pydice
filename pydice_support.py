#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.23a
#  in conjunction with Tcl version 8.6
#    Jun 19, 2019 09:06:41 PM CST  platform: Windows NT
#    Jun 19, 2019 10:36:59 PM CST  platform: Windows NT
import os
import webbrowser
from tkinter import filedialog, messagebox

from PIL import Image, ImageTk

import constant

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

# If the app is inited or not
is_inited = False

img_folder_path = None
img_filename_list = []
count_down = 5
curr_idx = 0
curr_img = None
stop = False
skipCountDown = True


def show_img():
    global w, curr_idx, img_folder_path, curr_img, stop
    canvas: tk.Canvas = w.Canvas1

    canvas.delete(tk.ALL)

    curr_filename = img_filename_list[curr_idx]

    img = Image.open("%s/%s" % (img_folder_path, curr_filename))
    img = img.resize((300, 300), Image.ANTIALIAS)

    curr_img = ImageTk.PhotoImage(img)

    canvas.delete(tk.ALL)
    canvas.create_image(300, 150, image=curr_img)
    show_filename(curr_filename)

    if stop:
        return

    curr_idx += 1

    if curr_idx == len(img_filename_list):
        curr_idx = 0

    canvas.after(50, show_img)


def show_filename(filename: str) -> None:
    global w
    label: tk.Label = w.Label1

    label.configure(text=filename)


def do_rolling():
    global w, rolling_timer
    canvas: tk.Canvas = w.Canvas1

    canvas.after(1, show_img)


def tick():
    global w, count_down, skipCountDown
    canvas: tk.Canvas = w.Canvas1

    if skipCountDown:
        do_rolling()
        return

    countdown_font = ('微软雅黑', 100, 'bold')

    canvas.delete("all")
    canvas.create_text(100, 100, text=count_down, font=countdown_font)
    count_down -= 1
    if count_down <= 0:
        print("count down to 0")
        do_rolling()
    else:
        canvas.after(1000, tick)


def show_count_down() -> None:
    global w
    canvas: tk.Canvas = w.Canvas1

    canvas.after(1, tick)


def start_rolling():
    if img_filename_list is None or len(img_filename_list) == 0:
        init_from_img_folder()
        return

    global w, count_down, stop
    start_btn: tk.Button = w.Button1

    if start_btn['text'] == 'Stop':
        stop_rolling()
        return

    start_btn.configure(text="Stop")

    count_down = 5
    stop = False

    show_count_down()


def is_valid_img_filename(filename: str) -> bool:
    if filename is None:
        return False

    if "." not in filename:
        return False

    suffix = filename.split(".")[1]

    if suffix.lower() in constant.valid_img_file_suffix:
        return True
    else:
        return False


def check_img_folder(folder_path: str) -> bool:
    global img_filename_list

    if folder_path is None or folder_path == '':
        return False

    files = os.listdir(folder_path)

    if files is None or len(files) == 0:
        return False

    img_filename_list = list(filter(is_valid_img_filename, files))

    if img_filename_list:
        return True
    else:
        return False


def show_folder_info(selected_folder_path: str, img_count: int) -> None:
    global w
    canvas: tk.Canvas = w.Canvas1
    label: tk.Label = w.Label1

    label.configure(text="... ...")
    canvas.delete(tk.ALL)
    canvas.create_text(100, 100, text="%s images selected" % img_count)
    canvas.create_text(100, 150, text="Click [Start] to rolling!")

    pass


def init_from_img_folder():
    """ask user to select a directory, check if contains image"""
    global img_folder_path, is_inited
    img_folder_path = filedialog.askdirectory()

    # If user not select a folder by click cancel on file choose dialog, do nothing
    if img_folder_path is None or img_folder_path == '':
        return

    if check_img_folder(img_folder_path):
        is_inited = True
        show_folder_info(img_folder_path, len(img_filename_list))
    else:
        messagebox.showwarning(title="Ah Oww!", message="""
        Where is the image file in the folder?
        
        [Tips]
        
        Please select a folder that contains .jpg/.png/.gif to start.
        
        """)


def load_from_img_folder():
    # ask user to locate a folder including images
    init_from_img_folder()


def quit_app():
    """quit app"""
    destroy_window()


def show_about_window():
    """show about info, ask user if to open github url in browser"""
    yes_to_open_github = messagebox.askyesno("PyDice v1.0.0", message="""
    
    Version:    v1.0.1
    Author:     Jiang Wenjian
    Github:     https://github.com/jwenjian/pydice
    Licence:    GPL - 3.0
    
    More info please see README in github, sure to open?
    
    """)

    if yes_to_open_github:
        webbrowser.open("https://github.com/jwenjian/pydice")


def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top


def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None


if __name__ == '__main__':
    import pydice

    pydice.vp_start_gui()


def stop_rolling() -> None:
    """
    stop rolling the image and locate the current image

    :return: None
    """
    global stop, w

    start_btn: tk.Button = w.Button1

    start_btn.configure(text='Start')

    stop = True
